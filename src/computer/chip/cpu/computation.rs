use crate::computer::chip::arithmetic::{alu, AluOp};

#[derive(PartialEq, Debug)]
pub enum Computation {
    Zero = 0b0101010,
    One = 0b0111111,
    NegOne = 0b0111010,
    D = 0b0001100,
    A = 0b0110000,
    M = 0b1110000,
    NotD = 0b0001101,
    NotA = 0b0110001,
    NotM = 0b1110001,
    NegD = 0b0001111,
    NegA = 0b0110011,
    NegM = 0b1110011,
    DPlusOne = 0b0011111,
    APlusOne = 0b0110111,
    MPlusOne = 0b1110111,
    DMinusOne = 0b0001110,
    AMinusOne = 0b0110010,
    MMinusOne = 0b1110010,
    DPlusA = 0b0000010,
    DPlusM = 0b1000010,
    DMinusA = 0b0010011,
    DMinusM = 0b1010011,
    AMinusD = 0b0000111,
    MMinusD = 0b1000111,
    DAndA = 0b0000000,
    DAndM = 0b0100000,
    DOrA = 0b0010101,
    DOrM = 0b1010101,
}

impl Computation {
    pub fn execute(&self, d_value: u16, a_value: u16, m_value: u16) -> (u16, bool, bool) {
        match self {
            Computation::Zero => alu(0, 0, AluOp::Zero),
            Computation::One => alu(0, 0, AluOp::One),
            Computation::NegOne => alu(0, 0, AluOp::NegOne),
            Computation::D => alu(d_value, 0, AluOp::X),
            Computation::A => alu(a_value, 0, AluOp::X),
            Computation::M => alu(m_value, 0, AluOp::X),
            Computation::NotD => alu(d_value, 0, AluOp::NotX),
            Computation::NotA => alu(a_value, 0, AluOp::NotX),
            Computation::NotM => alu(m_value, 0, AluOp::NotX),
            Computation::NegD => alu(d_value, 0, AluOp::NegX),
            Computation::NegA => alu(a_value, 0, AluOp::NegX),
            Computation::NegM => alu(m_value, 0, AluOp::NegX),
            Computation::DPlusOne => alu(d_value, 0, AluOp::IncX),
            Computation::APlusOne => alu(a_value, 0, AluOp::IncX),
            Computation::MPlusOne => alu(m_value, 0, AluOp::IncX),
            Computation::DMinusOne => alu(d_value, 0, AluOp::DecX),
            Computation::AMinusOne => alu(a_value, 0, AluOp::DecX),
            Computation::MMinusOne => alu(m_value, 0, AluOp::DecX),
            Computation::DPlusA => alu(d_value, a_value, AluOp::Add),
            Computation::DPlusM => alu(d_value, m_value, AluOp::Add),
            Computation::DMinusA => alu(d_value, a_value, AluOp::Sub),
            Computation::DMinusM => alu(d_value, m_value, AluOp::Sub),
            Computation::AMinusD => alu(a_value, d_value, AluOp::Sub),
            Computation::MMinusD => alu(m_value, d_value, AluOp::Sub),
            Computation::DAndA => alu(d_value, a_value, AluOp::And),
            Computation::DAndM => alu(d_value, m_value, AluOp::And),
            Computation::DOrA => alu(d_value, a_value, AluOp::Or),
            Computation::DOrM => alu(d_value, m_value, AluOp::Or),
        }
    }
}

impl From<u16> for Computation {
    fn from(value: u16) -> Self {
        match value {
            0b0101010 => Computation::Zero,
            0b0111111 => Computation::One,
            0b0111010 => Computation::NegOne,
            0b0001100 => Computation::D,
            0b0110000 => Computation::A,
            0b1110000 => Computation::M,
            0b0001101 => Computation::NotD,
            0b0110001 => Computation::NotA,
            0b1110001 => Computation::NotM,
            0b0001111 => Computation::NegD,
            0b0110011 => Computation::NegA,
            0b1110011 => Computation::NegM,
            0b0011111 => Computation::DPlusOne,
            0b0110111 => Computation::APlusOne,
            0b1110111 => Computation::MPlusOne,
            0b0001110 => Computation::DMinusOne,
            0b0110010 => Computation::AMinusOne,
            0b1110010 => Computation::MMinusOne,
            0b0000010 => Computation::DPlusA,
            0b1000010 => Computation::DPlusM,
            0b0010011 => Computation::DMinusA,
            0b1010011 => Computation::DMinusM,
            0b0000111 => Computation::AMinusD,
            0b1000111 => Computation::MMinusD,
            0b0000000 => Computation::DAndA,
            0b0100000 => Computation::DAndM,
            0b0010101 => Computation::DOrA,
            0b1010101 => Computation::DOrM,
            _ => unreachable!(),
        }
    }
}
